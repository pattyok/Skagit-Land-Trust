"use strict";

(function ($) {
  function setVH() {
    // account for vh on mobile
    // https://css-tricks.com/the-trick-to-viewport-units-on-mobile/
    var vh = window.innerHeight * 0.01; // Then we set the value in the --vh custom property to the root of the document

    document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
  }

  jQuery(function () {
    setVH(); // We listen to the resize event

    window.addEventListener('resize', function () {
      setVH();
    });
    $('.info-popover').gpopover();
    $('.toggle-slide').click(function (e) {
      e.preventDefault();
      var target = $(this).data('target');
      $('#' + target).slideToggle();
      $(this).toggleClass('open');
    }); // Select all links with hashes

    $('a[href*="#"]') // Remove links that don't actually link to anything
    .not('[href="#"]').not('[href="#0"]').click(function (event) {
      // On-page links
      if (location.pathname.replace(/^\//, '') === this.pathname.replace(/^\//, '') && location.hostname === this.hostname) {
        // Figure out element to scroll to
        var target = $(this.hash);
        target = target.length ? target : $('[name=' + this.hash.slice(1) + ']'); // Does a scroll target exist?

        if (target.length) {
          // Only prevent default if animation is actually gonna happen
          event.preventDefault();
          $('html, body').animate({
            scrollTop: target.offset().top
          }, 1000, function () {
            // Callback after animation
            // Must change focus!
            var $target = $(target);
            $target.focus();

            if ($target.is(':focus')) {
              // Checking if the target was focused
              return false;
            }

            $target.attr('tabindex', '-1'); // Adding tabindex for elements not focusable

            $target.focus(); // Set focus again
          });
        }
      }
    });
  });
})(jQuery);