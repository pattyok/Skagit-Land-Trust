"use strict";

/* global lazarThemeScreenReaderText */

/**
 * File navigation.js.
 *
 * Handles toggling the navigation menu for small screens and enables TAB key
 * navigation support for dropdown menus.
 */
var KEYMAP = {
  TAB: 9
};

if ('loading' === document.readyState) {
  // The DOM has not yet been loaded.
  document.addEventListener('DOMContentLoaded', initNavigation);
} else {
  // The DOM has already been loaded.
  initNavigation();
} // Initiate the menus when the DOM loads.


function initNavigation() {
  initNavToggleSubmenus();
  initNavToggleSmall();
}
/**
 * Initiate the script to process all
 * navigation menus with submenu toggle enabled.
 */


function initNavToggleSubmenus() {
  var navTOGGLE = document.querySelectorAll('.nav--toggle-sub'); // No point if no navs.

  if (!navTOGGLE.length) {
    return;
  }

  for (var i = 0; i < navTOGGLE.length; i++) {
    initEachNavToggleSubmenu(navTOGGLE[i]);
  }
}
/**
 * Initiate the script to process submenu
 * navigation toggle for a specific navigation menu.
 * @param {Object} nav Navigation element.
 */


function initEachNavToggleSubmenu(nav) {
  // Get the submenus.
  var SUBMENUS = nav.querySelectorAll('.menu ul'); // No point if no submenus.

  if (!SUBMENUS.length) {
    return;
  } // Create the dropdown button.


  var dropdownButton = getDropdownButton();

  for (var i = 0; i < SUBMENUS.length; i++) {
    var parentMenuItem = SUBMENUS[i].parentNode;
    var parentLink = parentMenuItem.firstElementChild.cloneNode(true);
    var dropdown = parentMenuItem.querySelector('.dropdown');
    var firstSubItem = SUBMENUS[i].firstElementChild; // If no dropdown, create one.

    if (!dropdown) {
      // Create dropdown.
      dropdown = document.createElement('span');
      dropdown.classList.add('dropdown');
      var dropdownSymbol = document.createElement('i');
      dropdownSymbol.classList.add('dropdown-symbol');
      dropdown.appendChild(dropdownSymbol); // Add before submenu.

      SUBMENUS[i].parentNode.insertBefore(dropdown, SUBMENUS[i]);
    } // Convert dropdown to button make one for parent item and one for first child in submenu


    var thisDropdownButton = dropdownButton.cloneNode(true);
    var childDropdownButton = dropdownButton.cloneNode(true); // Copy contents of dropdown into button.

    thisDropdownButton.innerHTML = dropdown.innerHTML;
    childDropdownButton.innerHTML = dropdown.innerHTML; // Replace dropdown with toggle button.

    dropdown.parentNode.replaceChild(thisDropdownButton, dropdown); // Clone the parent element link and button to create the "back" button on Mobile

    var backItem = document.createElement('li');
    backItem.classList.add('mobile-menu-item-back');
    var backItemLabel = document.createTextNode('Back');
    backItem.appendChild(backItemLabel);
    SUBMENUS[i].insertBefore(backItem, firstSubItem);
    backItem.appendChild(childDropdownButton); //add parent link as first item in submenu for mobile;

    var parentItem = document.createElement('li');
    parentItem.classList.add('mobile-menu-item-parent');
    parentItem.appendChild(parentLink);
    SUBMENUS[i].insertBefore(parentItem, firstSubItem); // Toggle the submenu when we click the dropdown button.

    thisDropdownButton.addEventListener('click', function (e) {
      toggleSubMenu(e.target.parentNode);
    }); // Toggle the submenu when we click the dropdown button.

    childDropdownButton.addEventListener('click', function (e) {
      toggleSubMenu(findAncestor(e.target, '.menu-item--has-toggle'));
    }); // Clean up the toggle if a mouse takes over from keyboard.

    parentMenuItem.addEventListener('mouseleave', function (e) {
      toggleSubMenu(e.target, false);
    }); // When we focus on a menu link, make sure all siblings are closed.

    parentMenuItem.querySelector('a').addEventListener('focus', function (e) {
      var parentMenuItemsToggled = e.target.parentNode.parentNode.querySelectorAll('li.menu-item--toggled-on');

      for (var j = 0; j < parentMenuItemsToggled.length; j++) {
        toggleSubMenu(parentMenuItemsToggled[j], false);
      }
    }); // Handle keyboard accessibility for traversing menu.

    SUBMENUS[i].addEventListener('keydown', function (e) {
      // These specific selectors help us only select items that are visible.
      var focusSelector = 'ul.toggle-show > li > a, ul.toggle-show > li > button';

      if (KEYMAP.TAB === e.keyCode) {
        if (e.shiftKey) {
          // Means we're tabbing out of the beginning of the submenu.
          if (isfirstFocusableElement(e.target, document.activeElement, focusSelector)) {
            toggleSubMenu(e.target.parentNode, false);
          } // Means we're tabbing out of the end of the submenu.

        } else if (islastFocusableElement(e.target, document.activeElement, focusSelector)) {
          toggleSubMenu(e.target.parentNode, false);
        }
      }
    });
    SUBMENUS[i].parentNode.classList.add('menu-item--has-toggle');
  }
}
/**
 * Initiate the script to process all
 * navigation menus with small toggle enabled.
 */


function initNavToggleSmall() {
  var navTOGGLE = document.querySelectorAll('.nav--toggle-small'); // No point if no navs.

  if (!navTOGGLE.length) {
    return;
  }

  for (var i = 0; i < navTOGGLE.length; i++) {
    initEachNavToggleSmall(navTOGGLE[i]);
  }
}
/**
 * Set the height of the page so scrolling only goes to the height of the nav
 */


function setPageHeight() {
  var header = document.getElementById('masthead');
  var nav = document.getElementById('primary-menu-wrapper');
  var height = header.offsetHeight + nav.offsetHeight;
  document.getElementById('page').setAttribute('style', 'height: ' + height + 'px');
}
/**
 * Set the height of the page so scrolling only goes to the height of the nav
 */


function removePageHeight() {
  document.getElementById('page').setAttribute('style', 'height: auto');
}
/**
 * Initiate the script to process small
 * navigation toggle for a specific navigation menu.
 * @param {Object} nav Navigation element.
 */


function initEachNavToggleSmall(nav) {
  var menuTOGGLE = nav.querySelector('.header-toggle'); // Return early if MENUTOGGLE is missing.

  if (!menuTOGGLE) {
    return;
  } // Add an initial values for the attribute.


  menuTOGGLE.setAttribute('aria-expanded', 'false');
  menuTOGGLE.addEventListener('click', function (e) {
    /** Toggle search / menus when one is open and clicking on the other */
    var toggleOff = e.currentTarget.getAttribute('data-toggleoff');
    var toggleOffBtn = document.getElementById(toggleOff);

    if (toggleOffBtn && 'true' === toggleOffBtn.getAttribute('aria-expanded')) {
      document.getElementById(toggleOff).click();
    }

    nav.classList.toggle('nav--toggled-on'); //should not scroll when  nav is open (mobile only but that is handled with css)

    if (nav.classList.contains('nav--toggled-on') && nav.classList.contains('main-navigation')) {
      //document.body.classList.add( 'overflow-hidden' );
      document.documentElement.classList.add('overflow-hidden');
      setPageHeight();
    } else {
      //document.body.classList.remove( 'overflow-hidden' );
      document.documentElement.classList.remove('overflow-hidden');
      removePageHeight();
    }

    e.currentTarget.setAttribute('aria-expanded', 'false' === e.currentTarget.getAttribute('aria-expanded') ? 'true' : 'false');
  }, false);
}
/**
 * Toggle submenus open and closed, and tell screen readers what's going on.
 * @param {Object} parentMenuItem Parent menu element.
 * @param {boolean} forceToggle Force the menu toggle.
 * @return {void}
 */


function toggleSubMenu(parentMenuItem, forceToggle) {
  var toggleButton = parentMenuItem.querySelector('.dropdown-toggle'),
      subMenu = parentMenuItem.querySelector('ul'),
      mainParentMenu = parentMenuItem.closest('.nav--toggle-small');
  var parentMenuItemToggled = parentMenuItem.classList.contains('menu-item--toggled-on'); // Will be true if we want to force the toggle on, false if force toggle close.

  if (undefined !== forceToggle && 'boolean' === typeof forceToggle) {
    parentMenuItemToggled = !forceToggle;
  } // Toggle aria-expanded status.


  toggleButton.setAttribute('aria-expanded', (!parentMenuItemToggled).toString());
  /*
   * Steps to handle during toggle:
   * - Let the parent menu item know we're toggled on/off.
   * - Toggle the ARIA label to let screen readers know will expand or collapse.
   */

  if (parentMenuItemToggled) {
    // Toggle "off" the submenu.
    parentMenuItem.classList.remove('menu-item--toggled-on');
    subMenu.classList.remove('toggle-show');
    toggleButton.setAttribute('aria-label', lazarThemeScreenReaderText.expand);
    mainParentMenu.classList.remove('subnav--toggled-on'); // Make sure all children are closed.

    var subMenuItemsToggled = parentMenuItem.querySelectorAll('.menu-item--toggled-on');

    for (var i = 0; i < subMenuItemsToggled.length; i++) {
      toggleSubMenu(subMenuItemsToggled[i], false);
    }
  } else {
    // Make sure siblings are closed.
    var parentMenuItemsToggled = parentMenuItem.parentNode.querySelectorAll('li.menu-item--toggled-on');

    for (var _i = 0; _i < parentMenuItemsToggled.length; _i++) {
      toggleSubMenu(parentMenuItemsToggled[_i], false);
    } // Toggle "on" the submenu.


    parentMenuItem.classList.add('menu-item--toggled-on');
    mainParentMenu.classList.add('subnav--toggled-on');
    subMenu.classList.add('toggle-show');
    toggleButton.setAttribute('aria-label', lazarThemeScreenReaderText.collapse);
  }
}
/**
 * Returns the dropdown button
 * element needed for the menu.
 * @return {Object} drop-down button element
 */


function getDropdownButton() {
  var dropdownButton = document.createElement('button');
  dropdownButton.classList.add('dropdown-toggle');
  dropdownButton.setAttribute('aria-expanded', 'false');
  dropdownButton.setAttribute('aria-label', lazarThemeScreenReaderText.expand);
  return dropdownButton;
}
/**
 * Returns true if element is the
 * first focusable element in the container.
 * @param {Object} container
 * @param {Object} element
 * @param {string} focusSelector
 * @return {boolean} whether or not the element is the first focusable element in the container
 */


function isfirstFocusableElement(container, element, focusSelector) {
  var focusableElements = container.querySelectorAll(focusSelector);

  if (0 < focusableElements.length) {
    return element === focusableElements[0];
  }

  return false;
}
/**
 * Returns true if element is the
 * last focusable element in the container.
 * @param {Object} container
 * @param {Object} element
 * @param {string} focusSelector
 * @return {boolean} whether or not the element is the last focusable element in the container
 */


function islastFocusableElement(container, element, focusSelector) {
  var focusableElements = container.querySelectorAll(focusSelector);

  if (0 < focusableElements.length) {
    return element === focusableElements[focusableElements.length - 1];
  }

  return false;
}
/**
 *  Return ancestor with class
 *  For IE 11 (does not support closest d)
 * @param {Object} el
 * @param {string} sel
 * @return {Object} matching element
 */


function findAncestor(el, sel) {
  while ((el = el.parentElement) && !(el.matches || el.matchesSelector).call(el, sel)) {}

  return el;
}