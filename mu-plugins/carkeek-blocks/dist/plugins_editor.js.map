{"version":3,"file":"plugins_editor.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/plugins/index.js","webpack:///./src/plugins/settings.js","webpack:///./src/plugins/styles.editor.scss?37b3","webpack:///./src/plugins_editor.js","webpack:///external [\"wp\",\"blockEditor\"]","webpack:///external [\"wp\",\"blocks\"]","webpack:///external [\"wp\",\"components\"]","webpack:///external [\"wp\",\"compose\"]","webpack:///external [\"wp\",\"data\"]","webpack:///external [\"wp\",\"editPost\"]","webpack:///external [\"wp\",\"element\"]","webpack:///external [\"wp\",\"i18n\"]","webpack:///external [\"wp\",\"plugins\"]"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/plugins_editor.js\");\n","/**\n * Internal dependencies\n */\nimport \"./styles.editor.scss\";\nimport PageHeaderSettings from \"./settings\";\n\n/**\n * WordPress dependencies\n */\nimport { registerPlugin } from \"@wordpress/plugins\";\nimport { registerBlockCollection } from \"@wordpress/blocks\";\n\nregisterPlugin(\"carkeek-blocks-pageheader\", {\n    icon: false,\n    render: PageHeaderSettings\n});\n\n\n\nregisterBlockCollection(\"carkeek-blocks\", {\n    title: \"Carkeek Blocks\",\n    icon: \"wordpress\"\n});\n\n\n","import { Component } from \"@wordpress/element\";\nimport { PluginDocumentSettingPanel } from \"@wordpress/edit-post\";\nimport { __ } from \"@wordpress/i18n\";\nimport { CheckboxControl, TextControl, ColorPalette } from \"@wordpress/components\";\nimport { select, withSelect, withDispatch } from \"@wordpress/data\";\nimport { compose } from \"@wordpress/compose\";\nimport { getColorObjectByColorValue, getColorObjectByAttributeValues } from \"@wordpress/block-editor\";\n\n\nclass PageHeaderSettings extends Component {\n    constructor() {\n        super(...arguments);\n\n        this.initialize = this.initialize.bind(this);\n    }\n\n    componentDidMount() {\n        this.initialize();\n    }\n\n    componentDidUpdate() {\n        this.initialize();\n    }\n\n    initialize() {\n        const { postmeta } = this.props;\n\n        const titleBlock = document.querySelector(\".editor-post-title__block\");\n\n        if (titleBlock) {\n\t\t\tconst isTitleHidden = typeof postmeta !== 'undefined' && typeof postmeta._carkeekblocks_title_hidden !== 'undefined' ? postmeta._carkeekblocks_title_hidden : false;\n\n\n            const bodyClass = isTitleHidden\n                ? \"carkeek-blocks-title-hidden\"\n                : \"carkeek-blocks-title-visible\";\n\n            //remove existing class\n            if (isTitleHidden) {\n                document.body.classList.remove(\"carkeek-blocks-title-visible\");\n            } else {\n                document.body.classList.remove(\"carkeek-blocks-title-hidden\");\n            }\n\n            document.body.classList.add(bodyClass);\n        }\n    }\n    render() {\n        const {\n\t\t\tonToggleTitle,\n            onToggleImage,\n            onbylineChange,\n            onColorChange,\n\t\t\tpostmeta,\n            posttype,\n            featuredImage,\n            colors\n        } = this.props;\n\t\tif ( [ 'wp_block' ].includes( posttype ) ) {\n\t\t\treturn false;\n        }\n        let byLineField;\n        if ( [ 'post' ].includes( posttype ) && typeof postmeta !== 'undefined' ) {\n            const byline = typeof postmeta.byline !== 'undefined' ? postmeta.byline : '';\n\t\t\tbyLineField = <TextControl\n                            value={byline}\n                            label={__(\"Post Byline\", \"carkeek-blocks\")}\n                            onChange={value => onbylineChange(value)}\n                        />;\n        }\n\t\tconst isTitleHidden = typeof postmeta !== 'undefined' && typeof postmeta._carkeekblocks_title_hidden !== 'undefined' ? postmeta._carkeekblocks_title_hidden : false;\n\t\tconst isImageHidden = typeof postmeta !== 'undefined' && typeof postmeta._carkeekblocks_featuredimage_hidden !== 'undefined' ? postmeta._carkeekblocks_featuredimage_hidden : false;\n\t\tlet hideImageCheckbox;\n        if (featuredImage) {\n            hideImageCheckbox = (\n                <CheckboxControl\n                    className=\"carkeek-hide-featured-image-label\"\n                    label=\"Hide Featured Image\"\n                    checked={ isImageHidden }\n                    onChange={ onToggleImage }\n                    help={\n                        isImageHidden\n                            ? __(\n                                  \"The Featured Image is hidden on the rendered page.\",\n                                  \"carkeek-blocks\"\n                              )\n                            : __(\n                                  \"The Featured Image is visible on the rendered page.\",\n                                  \"carkeek-blocks\"\n                              )\n                    }\n                />\n            );\n        }\n        let colorField;\n        if ( [ 'protected_farms', 'tribe_events' ].includes( posttype ) && typeof postmeta !== 'undefined' ) {\n            const selectedColor = typeof postmeta._carkeekblocks_archive_background_color !== 'undefined' ? getColorObjectByAttributeValues(colors, postmeta._carkeekblocks_archive_background_color): '';\n            colorField = (\n                <PluginDocumentSettingPanel\n                    name=\"bgcolor-panel\"\n                    title=\"Background Color\"\n                    className=\"bgcolor-panel\"\n                >\n                { __( 'Set a background color that will be used in certain views of this item.' ) }\n                <ColorPalette\n                    title={__(\"Color Settings\", \"carkeek-blocks\")}\n                    colors= { colors }\n                    value= { selectedColor.color }\n                    onChange= { onColorChange }\n                    disableCustomColors= {true}\n                ></ColorPalette>\n                </PluginDocumentSettingPanel>\n            );\n        }\n\n        return (\n            <>\n            <PluginDocumentSettingPanel\n                name=\"page-header-settings-panel\"\n                title=\"Page Header Settings\"\n                className=\"page-header-settings-panel\"\n            >\n                <CheckboxControl\n                    className=\"carkeek-hide-title-label\"\n                    label={__(\"Hide \" + posttype + \" Title\", \"carkeek-blocks\")}\n                    checked={isTitleHidden}\n                    onChange={ onToggleTitle }\n                    help={\n                        isTitleHidden\n                            ? __(\n                                  \"Title is hidden on the rendered page.\",\n                                  \"carkeek-blocks\"\n                              )\n                            : null\n                    }\n                />\n                {hideImageCheckbox}\n                {byLineField}\n\n            </PluginDocumentSettingPanel>\n            {colorField}\n            </>\n        );\n    }\n}\n\nexport default compose(\n    withSelect( () => {\n        return {\n            postmeta: select(\"core/editor\").getEditedPostAttribute(\"meta\"),\n            featuredImage: select(\"core/editor\").getEditedPostAttribute(\n                \"featured_media\"\n            ),\n            posttype: select(\"core/editor\").getEditedPostAttribute(\"type\"),\n            colors: select(\"core/block-editor\").getSettings().colors,\n        };\n    }),\n    withDispatch( ( dispatch, ownProps ) => {\n\t\tlet hideTitle;\n\t\tif ( typeof ownProps.postmeta !== 'undefined' && typeof ownProps.postmeta._carkeekblocks_title_hidden !== 'undefined' ) {\n\t\t\thideTitle = ownProps.postmeta._carkeekblocks_title_hidden ;\n\t\t}\n\t\tlet hideImage;\n\t\tif ( typeof ownProps.postmeta !== 'undefined' && typeof ownProps.postmeta._carkeekblocks_featuredimage_hidden !== 'undefined' ) {\n\t\t\thideImage = ownProps.postmeta._carkeekblocks_featuredimage_hidden ;\n        }\n\n        return {\n            onToggleTitle() {\n                dispatch(\"core/editor\").editPost({\n                    meta: { _carkeekblocks_title_hidden: ! hideTitle }\n\t\t\t\t});\n            },\n            onToggleImage() {\n                dispatch(\"core/editor\").editPost({\n                    meta: {\n                        _carkeekblocks_featuredimage_hidden: ! hideImage\n                    }\n                });\n            },\n            onColorChange(bgcolor) {\n                const selected = getColorObjectByColorValue(ownProps.colors, bgcolor);\n                dispatch(\"core/editor\").editPost({\n                    meta: {\n                        _carkeekblocks_archive_background_color: selected.slug\n                    }\n                });\n            },\n            onbylineChange(byline) {\n                dispatch(\"core/editor\").editPost({\n                    meta: {\n                        byline: byline\n                    }\n                });\n            }\n        };\n    })\n)(PageHeaderSettings);\n","// extracted by mini-css-extract-plugin","import \"./plugins\";\n","module.exports = wp[\"blockEditor\"];","module.exports = wp[\"blocks\"];","module.exports = wp[\"components\"];","module.exports = wp[\"compose\"];","module.exports = wp[\"data\"];","module.exports = wp[\"editPost\"];","module.exports = wp[\"element\"];","module.exports = wp[\"i18n\"];","module.exports = wp[\"plugins\"];"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AACA;AAEA;;;;AAGA;AACA;AAEA;AACA;AACA;AAFA;AAOA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;;;;AAtIA;AACA;AAwIA;AAEA;AACA;AACA;AAGA;AACA;AANA;AAQA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AA3BA;AA6BA;;;;;;;;;;;ACpMA;;;;;;;;;;;;ACAA;AAAA;;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}